{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","catArray","cats","map","cat","i","src_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","height","overflowY","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","console","log","_this2","fetch","then","response","json","users","_this$state","filteredCats","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GACzB,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,iCAAAC,OAAmCN,EAAnC,iBAAsDO,IAAI,KAClEN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcTS,EAlBE,SAAAX,GAAc,IACrBY,EADqBZ,EAAXa,KACMC,IAAI,SAACC,EAAKC,GAAN,OAEtBZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKH,EAAIZ,GACTA,GAAIY,EAAIZ,GACRF,KAAMc,EAAId,KACVC,MAAOa,EAAIb,UAInB,OACIE,EAAAC,EAAAC,cAAA,WACKM,ICFEO,EAbG,SAAAnB,GAAmCA,EAAhCoB,YAAgC,IAAnBC,EAAmBrB,EAAnBqB,aAC9B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,mCACVe,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCXI,SARA,SAACC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,OAAQ,QAASC,UAAW,WACpCH,EAAMI,YCgDJC,cA5CX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAErB,YAAaoB,EAAME,OAAOC,SAjB1CX,EAAKY,MAAQ,CACT/B,KAAM,GACNO,YAAa,IAEjByB,QAAQC,IAAI,mCANFd,mFASM,IAAAe,EAAAZ,KAChBa,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKN,SAAS,CAAE5B,KAAMuC,MAErCP,QAAQC,IAAR,kJAQK,IAAAO,EACyBlB,KAAKS,MAA3B/B,EADHwC,EACGxC,KAAMO,EADTiC,EACSjC,YACRkC,EAAezC,EAAK0C,OAAO,SAAAxC,GAC7B,OAAOA,EAAId,KAAKuD,cAAcC,SAASrC,EAAYoC,iBAKvD,OAHAX,QAAQC,IAAR,qOAGQjC,EAAK6C,OAGTtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACsD,EAAD,KACIxD,EAAAC,EAAAC,cAACuD,EAAD,CAAUhD,KAAMyC,MANxBlD,EAAAC,EAAAC,cAAA,gCAhCMwD,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.ed3c0c48.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n            <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img src={`https://robohash.org/set_set4/${id}?size=100x100`} alt=\"\" />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ( {cats} ) => {\r\n    const catArray = cats.map((cat, i) =>\r\n\r\n        <Card \r\n            key={cat.id} \r\n            id={cat.id} \r\n            name={cat.name} \r\n            email={cat.email} \r\n        />\r\n        );\r\n        \r\n    return (\r\n        <div>\r\n            {catArray}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                type=\"search\" \r\n                placeholder=\"Search nyahs\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n        <div style={{height: '700px', overflowY: 'scroll'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n//import { cats } from './cats';\r\nimport './App.css';\r\nimport Scroll from './Scroll.js';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            cats: [],\r\n            searchField: ''  \r\n        }\r\n        console.log('LifeCycle Hook #1 - Constructor')\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ cats: users }))\r\n        //this.setState( { cats: cats } )\r\n        console.log(`LifeCycle Hook #2 - I'm lexically second, but last in the mounting\r\n        lifecycle - I'm componentDidMount`);\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value })\r\n    }\r\n    \r\n    render() {  \r\n        const { cats, searchField } = this.state;\r\n        const filteredCats = cats.filter(cat => {\r\n            return cat.name.toLowerCase().includes(searchField.toLowerCase());\r\n        } )\r\n        console.log(`LifeCycle Hook #3 - I'm lexically third, but I get run second\r\n        because there is no 'componentWillMount', then again when 'componentDidMount'\r\n        changes the cats array to the imported and destructured cat object)`);\r\n        return !cats.length ?\r\n            <h1>Loading... </h1> :\r\n         (\r\n            <div className=\"tc\">\r\n                <h1 className='f1'>MiaowyFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList cats={filteredCats} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n     };\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import CardList from './CardList';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}